
substitutions:
  device_name: desk-smart-sensors
  friendly_name: capteur bureau
  area: Bureau

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  area: ${area} 

esp32:
  board: lolin_s3
  framework:
    type: esp-idf
    

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: ${device_name}.intra.sberard.fr

  ap:
    ssid: ${device_name}
    password: !secret ap_password

api:
  reboot_timeout: 15min
  encryption:
    key: !secret api_encryption

ota:
  platform: esphome
  password: !secret ota_password

#captive_portal:

logger:
  level: DEBUG
  baud_rate: 0

web_server:

#######################################
# Device specific Config Begins Below #
#######################################
packages:
  device_base:
    url: https://github.com/AntorFr/esphome-projects
    file: packages/device_base.yaml

globals:
  - id: source
    type: std::string
  - id: url
    type: std::string
  - id: info
    type: std::string

i2c:
  sda: GPIO20
  scl: GPIO21
  scan: true
  id: bus_a

light:
  - id: status_led
    name: "status_led"
    internal: False
    platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO48
    num_leds: 10
    chipset: WS2812

pn532_i2c:
  id: pn532_board  
  on_tag:
    then:

    - light.turn_on:
        id: status_led
        brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
        flash_length: 500ms
    
    - delay: 0.15s #to fix slow component       
    - lambda: |-
        id(source)="";
        id(url)="";
        id(info)="";
        if (tag.has_ndef_message()) {
          auto message = tag.get_ndef_message();
          auto records = message->get_records();
          for (auto &record : records) {
            std::string payload = record->get_payload();
            std::string type = record->get_type();
            size_t hass = payload.find("https://www.home-assistant.io/tag/");
            size_t applemusic = payload.find("https://music.apple.com");
            size_t spotify = payload.find("https://open.spotify.com");
            size_t sonos = payload.find("sonos-2://");
            if (type == "U" and hass != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Home Assistant tag NDEF");
              id(source)="hass";
              id(url)=payload;
              id(info)=payload.substr(hass + 34);
            }
            else if (type == "U" and applemusic != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Apple Music tag NDEF");
              id(source)="amusic";
              id(url)=payload;
            }
            else if (type == "U" and spotify != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Spotify tag NDEF");
              id(source)="spotify";
              id(url)=payload;
            }
            else if (type == "U" and sonos != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Sonos app tag NDEF");
              id(source)="sonos";
              id(url)=payload;
            }
            else if (type == "T" ) {
              ESP_LOGD("tagreader", "Found music info tag NDEF");
              id(info)=payload;
            }
            else if ( id(source)=="" ) {
              id(source)="uid";
            }
          }
        }
        else {
          id(source)="uid";
        } 
    - if:
        condition:
          lambda: 'return ( id(source)=="uid" );'
        then:
          - homeassistant.tag_scanned: !lambda |-
              ESP_LOGD("tagreader", "No HA NDEF, using UID");
              return x;
        else:
        - if:
            condition:
              lambda: 'return ( id(source)=="hass" );'
            then:
            - homeassistant.tag_scanned: !lambda 'return id(info);'
            else:
            - homeassistant.event:
                event: esphome.music_tag
                data:
                  reader: !lambda |-
                    return App.get_name().c_str();
                  source: !lambda |-
                    return id(source);
                  url: !lambda |-
                    return id(url);
                  info: !lambda |-
                    return id(info);