substitutions:
  device_name: neopixel-tester
  friendly_name: Pixel tester
  area: "Bureau"

  day_phase: "input_select.day_phase"

  children_morning: "Matin - reveil enfants"
  evening: "Soirée"
  children_evening: "Soirée - retour au calme"
  children_night: "Soirée - enfants couché"
  night: "Nuit"


esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  area: ${area}  
esp32:
  board: esp32-s3-devkitc-1
  #variant: ESP32-ESP32S3
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: ${device_name}.intra.sberard.fr

  ap:
    ssid: ${device_name}
    password: !secret ap_password

logger:
  level: DEBUG
  
api:
  reboot_timeout: 30min
  encryption:
    key: !secret api_encryption

ota:
  platform: esphome
  password: !secret ota_password

captive_portal:
web_server:

external_components:
  - source: github://AntorFr/esphome-addressable-effetcs
    components: [ custom-addressable-effetcs ]
  #  refresh: 1s
  #- source:
  #    type: local
  #    path: components

custom-addressable-effetcs:
#######################################
# Device specific Config Begins Below #
#######################################
packages:
  device_base:
    url: https://github.com/AntorFr/esphome-projects
    file: packages/device_base.yaml

#status_led:
#  pin: GPIO23


light:
  - name: None
    platform: neopixelbus
    icon: "mdi:weather-night"
    #power_supply: relay
    type: GRB
    variant: WS2812
    pin: GPIO16
    num_leds: 63
    internal: False
    id: led
    method:
      type: esp32_rmt
      #type: esp32_i2s
      #bus: 0
    restore_mode: ALWAYS_OFF
    on_state:
      - lambda: |-
          auto state = id(led).remote_values;
          std::string effect = id(led).get_effect_name();
          if(state.is_on() && effect == "None" ){
            id(adapt_phase)->execute(id(day_phase).state);
          }
    effects:
      - addressable_lambda: #children_morning
          name: ${children_morning}
          lambda: |-
            if(initial_run) {
              id(children_morning)->execute();
            }
      - addressable_lambda: #evening
          name: ${evening}
          lambda: |-
            if(initial_run) {
              id(evening)->execute();
            }
      - addressable_lambda: #children_evening
          name: ${children_evening}
          lambda: |-
            if(initial_run) {
              id(children_evening)->execute();
            }
      - addressable_lambda: #children_night
          name: ${children_night}
          lambda: |-
            if(initial_run) {
              id(children_night)->execute();
            }
      - addressable_lambda: #night
          name: ${night}
          lambda: |-
            if(initial_run) {
              id(night)->execute();
            } 
  - platform: partition
    id: moon
    name: "${friendly_name} - Lune"
    icon: "mdi:moon-waning-crescent"
    entity_category: config
    segments:
      - id: led
        from: 0
        to: 30
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:
      - addressable_stars:
          stars_probability: 50%
      - addressable_lambda:
          name: heartbeat
          update_interval: 16ms
          lambda: |-
            int bpm = 40;
            int msPerBeat = (60000 / bpm);
            int secondBeat = (msPerBeat / 3);
            
            static bool firstBeat = 0;
            static unsigned long lastBeat;
          
            it.all().fade_to_black(15);

            unsigned long beatTimer = millis() - lastBeat;
            if((beatTimer > secondBeat) && firstBeat) { // time for the second beat?
              it.all() = Color(255,0,0);
              firstBeat = 0;
            }
            if(beatTimer > msPerBeat) { // time to reset the beat timer?
              it.all() = Color(255,0,0);
              firstBeat = 1;
              lastBeat = millis();
            }
  - platform: partition
    id: stars
    name: "${friendly_name} - Etoiles"
    icon: "mdi:star"   
    entity_category: config
    segments:
      - id: led
        from: 31
        to: 35
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:
      - addressable_lambda:
          name: heartbeat
          update_interval: 16ms
          lambda: |-
            int bpm = 40;
            int msPerBeat = (60000 / bpm);
            int secondBeat = (msPerBeat / 3);
            
            static bool firstBeat = 0;
            static unsigned long lastBeat;
          
            it.all().fade_to_black(15);

            unsigned long beatTimer = millis() - lastBeat;
            if((beatTimer > secondBeat) && firstBeat) { // time for the second beat?
              it.all() = Color(255,0,0);
              firstBeat = 0;
            }
            if(beatTimer > msPerBeat) { // time to reset the beat timer?
              it.all() = Color(255,0,0);
              firstBeat = 1;
              lastBeat = millis();
            }
  - platform: partition
    id: sun
    name: "${friendly_name} - Soleil"
    icon: "mdi:white-balance-sunny" 
    entity_category: config  
    segments:
      - id: led
        from: 36
        to: 62
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:
      - addressable_lambda:
          name: heartbeat
          update_interval: 16ms
          lambda: |-
            int bpm = 40;
            int msPerBeat = (60000 / bpm);
            int secondBeat = (msPerBeat / 3);
            
            static bool firstBeat = 0;
            static unsigned long lastBeat;
          
            it.all().fade_to_black(15);

            unsigned long beatTimer = millis() - lastBeat;
            if((beatTimer > secondBeat) && firstBeat) { // time for the second beat?
              it.all() = Color(255,0,0);
              firstBeat = 0;
            }
            if(beatTimer > msPerBeat) { // time to reset the beat timer?
              it.all() = Color(255,0,0);
              firstBeat = 1;
              lastBeat = millis();
            }

text_sensor:
  - id: day_phase
    platform: homeassistant
    entity_id: ${day_phase}
    internal: True
    on_value:
      - lambda: id(adapt_phase)->execute(x);
    
script:
 - id: 'children_morning'
   mode: restart
   then:
    - light.turn_on: #sun
        id: sun
        brightness: 30%
        red: 100%
        green: 100%
        blue: 100%
        effect: None 
    - light.turn_off: moon
    - light.turn_off: stars
 - id: 'evening'
   mode: restart
   then:
    - light.turn_off: moon
    - light.turn_off: stars
    - light.turn_on: #sun
        id: sun
        brightness: 100%
        red: 100%
        green: 50%
        blue: 0%
        effect: None
 - id: 'children_evening'
   mode: restart
   then:
    - light.turn_on: #sun
        id: sun
        brightness: 70%
        red: 100%
        green: 0%
        blue: 0%
        effect: None
    - light.turn_on: #moon
        id: moon
        brightness: 70%
        red: 100%
        green: 100%
        blue: 100%
        effect: twinkle 
    - light.turn_on: #stars
        id: stars
        brightness: 70%
        red: 100%
        green: 100%
        blue: 100%
        effect: twinkle  
 - id: 'children_night'
   mode: restart
   then:
    - light.turn_off: sun
    - light.turn_on: #moon
        id: moon
        brightness: 25%
        red: 100%
        green: 100%
        blue: 100%
        effect: None 
    - light.turn_on: #stars
        id: stars
        brightness: 25%
        red: 100%
        green: 100%
        blue: 100%
        effect: twinkle 
 - id: 'night'
   mode: restart
   then:
    - light.turn_off: sun
    - light.turn_on: #moon
        id: moon
        brightness: 15%
        red: 100%
        green: 100%
        blue: 100%
        effect: None 
    - light.turn_off: stars
 - id: 'adapt_phase'
   mode: restart
   parameters:
     phase: string
   then:
     - if:
        #TODO replace condition by looping into LightState :: get_effects()
        condition:
          lambda: |-
            return ( phase == "${children_morning}"
                  or phase == "${evening}"
                  or phase == "${children_evening}"
                  or phase == "${children_night}"
                  or phase == "${night}");
        then:
          - light.turn_on: #led
              id: led
              effect: !lambda return phase.c_str(); 


        