substitutions:
    device_name: timothee-wood-pannel
    friendly_name: TimothÃ©e bibliotheque
  
esphome:
  name: ${device_name}
# If buzzer is enabled, notify on api connection success
  on_boot:
    - priority: -10
      then:
      - wait_until:
          api.connected:
      - logger.log: API is connected!
      #- rtttl.play: "success:d=24,o=5,b=100:c,g,b"
      - switch.turn_on: buzzer_enabled
    - priority: -20
      then: 
        - lambda: |-
            auto index = id(display_mode).active_index();
            if (!(index.has_value())) {
              ESP_LOGD("custom", "Turn off led_matrix_display (default)");
              id(led_matrix_display).set_enabled(false);            
            } else {
              int i = index.value();
              switch (i) { // index of the choosen value
                case 0:
                  ESP_LOGD("custom", " Turn off led_matrix_display");
                  id(led_matrix_display).set_enabled(false);
                  break;
                case 1: 
                  ESP_LOGD("custom", " Turn on led_matrix_display");
                  id(led_matrix_display).set_enabled(true);
                  break;
              }
            }
            id(init_done)= true;

  
esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: ${device_name}.intra.sberard.fr

  ap:
    ssid: ${device_name}
    password: !secret ap_password

logger:
  
api:
  reboot_timeout: 5min
  password: !secret api_password
  
    
  services:
  - service: rfidreader_tag_ok
    then:
    - rtttl.play: "beep:d=16,o=5,b=100:b"

  - service: rfidreader_tag_ko
    then:
    - rtttl.play: "beep:d=8,o=5,b=100:b"

  - service: play_rtttl
    variables:
      song_str: string
    then:
    - rtttl.play: !lambda 'return song_str;'

  - service: write_tag_id
    variables:
      tag_id: string
    then:   
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "https://www.home-assistant.io/tag/";
        uri += tag_id;
        message->add_uri_record(uri);
        id(pn532_board).write_mode(message);
    - rtttl.play: "write:d=24,o=5,b=100:b"
    - wait_until:
        not:
          pn532.is_writing:
    - rtttl.play: "write:d=24,o=5,b=100:b,b"

  - service: rfidreader_tag_ok
    then:
    - rtttl.play: "beep:d=16,o=5,b=100:b"

  - service: rfidreader_tag_ko
    then:
    - rtttl.play: "beep:d=8,o=5,b=100:b"

  - service: play_rtttl
    variables:
      song_str: string
    then:
    - rtttl.play: !lambda 'return song_str;'

  - service: write_tag_id
    variables:
      tag_id: string
    then:   
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "https://www.home-assistant.io/tag/";
        uri += tag_id;
        message->add_uri_record(uri);
        id(pn532_board).write_mode(message);
    - rtttl.play: "write:d=24,o=5,b=100:b"
    - wait_until:
        not:
          pn532.is_writing:
    - rtttl.play: "write:d=24,o=5,b=100:b,b"

  - service: write_music_tag
    variables:
      music_url: string
      music_info: string
    then: 
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "";
        std::string text = "";
        uri += music_url;
        text += music_info;
        if ( music_url != "" ) {
          message->add_uri_record(uri);
        }
        if ( music_info != "" ) {
          message->add_text_record(text);
        }
        id(pn532_board).write_mode(message);
    - rtttl.play: "write:d=24,o=5,b=100:b"
    - wait_until:
        not:
          pn532.is_writing:
    - rtttl.play: "write:d=24,o=5,b=100:b,b"

ota:
  password: !secret ota_password

captive_portal:


sensor:
  - platform: wifi_signal
    name: ${device_name} Wifi Strength
    update_interval: 60s
  - platform: uptime
    name: ${device_name} Uptime

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"
    entity_category: diagnostic

text_sensor:
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      icon: mdi:wifi
      entity_category: diagnostic
    ssid:
      name: "${friendly_name} Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
#######################################
# Device specific Config Begins Below #
#######################################

#dashboard_import:
#  package_import_url: github://adonno/tagreader/tagreader.yaml

improv_serial:

# Define switches to control buzzer from HA
switch:
- platform: template
  name: "${friendly_name} Buzzer Enabled"
  id: buzzer_enabled
  icon: mdi:volume-high
  optimistic: true
  restore_state: true
  entity_category: config

  
# Define buttons for writing tags via HA 
button:
  - platform: template
    name: Write Tag Random
    id: write_tag_random
    # Optional variables:
    icon: "mdi:pencil-box"
    on_press:
      then:   
      - lambda: |-
          static const char alphanum[] = "0123456789abcdef";
          std::string uri = "https://www.home-assistant.io/tag/";
          for (int i = 0; i < 8; i++)
            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
          uri += "-";
          for (int j = 0; j < 3; j++) {
            for (int i = 0; i < 4; i++)
              uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
            uri += "-";
          }
          for (int i = 0; i < 12; i++)
            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
          auto message = new nfc::NdefMessage();
          message->add_uri_record(uri);
          ESP_LOGD("tagreader", "Writing payload: %s", uri.c_str());
          id(pn532_board).write_mode(message);
      - rtttl.play: "write:d=24,o=5,b=100:b"
      - wait_until:
          not:
            pn532.is_writing:
      - rtttl.play: "write:d=24,o=5,b=100:b,b"
  - platform: template
    name: Clean Tag
    id: clean_tag
    icon: "mdi:nfc-variant-off"
    on_press:
      then:  
      - lambda: 'id(pn532_board).clean_mode();'
      - rtttl.play: "write:d=24,o=5,b=100:b"
      - wait_until:
          not:
            pn532.is_writing:
      - rtttl.play: "write:d=24,o=5,b=100:b,b"
  - platform: template
    name: Cancel writing 
    id: cancel_writing
    icon: "mdi:pencil-off"
    on_press:
      then:
      - lambda: 'id(pn532_board).read_mode();'
      - rtttl.play: "write:d=24,o=5,b=100:b,b"

  - platform: restart
    name: "${friendly_name} Restart"
    entity_category: config


spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19


globals:
  - id: source
    type: std::string
  - id: url
    type: std::string
  - id: info
    type: std::string
  - id: init_done
    type: bool
    initial_value: "false"
    

pn532_spi:
  id: pn532_board
  cs_pin: 5
  update_interval: 0.5s
  on_tag:
    then:    
    - delay: 0.15s #to fix slow component
        
    - lambda: |-
        id(source)="";
        id(url)="";
        id(info)="";
        if (tag.has_ndef_message()) {
          auto message = tag.get_ndef_message();
          auto records = message->get_records();
          for (auto &record : records) {
            std::string payload = record->get_payload();
            std::string type = record->get_type();
            size_t hass = payload.find("https://www.home-assistant.io/tag/");
            size_t applemusic = payload.find("https://music.apple.com");
            size_t spotify = payload.find("https://open.spotify.com");
            size_t sonos = payload.find("sonos-2://");
            if (type == "U" and hass != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Home Assistant tag NDEF");
              id(source)="hass";
              id(url)=payload;
              id(info)=payload.substr(hass + 34);
            }
            else if (type == "U" and applemusic != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Apple Music tag NDEF");
              id(source)="amusic";
              id(url)=payload;
            }
            else if (type == "U" and spotify != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Spotify tag NDEF");
              id(source)="spotify";
              id(url)=payload;
            }
            else if (type == "U" and sonos != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Sonos app tag NDEF");
              id(source)="sonos";
              id(url)=payload;
            }
            else if (type == "T" ) {
              ESP_LOGD("tagreader", "Found music info tag NDEF");
              id(info)=payload;
            }
            else if ( id(source)=="" ) {
              id(source)="uid";
            }
          }
        }
        else {
          id(source)="uid";
        }
    
    - if:
        condition:
          lambda: 'return ( id(source)=="uid" );'
        then:
          - homeassistant.tag_scanned: !lambda |-
              ESP_LOGD("tagreader", "No HA NDEF, using UID");
              return x;
        else:
        - if:
            condition:
              lambda: 'return ( id(source)=="hass" );'
            then:
            - homeassistant.tag_scanned: !lambda 'return id(info);'
            else:
            - homeassistant.event:
                event: esphome.music_tag
                data:
                  reader: !lambda |-
                    return App.get_name().c_str();
                  source: !lambda |-
                    return id(source);
                  url: !lambda |-
                    return id(url);
                  info: !lambda |-
                    return id(info);
    
    - if:
        condition:
          switch.is_on: buzzer_enabled
        then:
        - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
    
# Define the buzzer output
output:
- platform: ledc
  pin: 4
  id: buzzer


# Define buzzer as output for RTTTL
rtttl:
  output: buzzer

select:
  - platform: template
    name: "Display mode"
    id: "display_mode"
    optimistic: true
    restore_value: true
    options:
      - Light
      - Clock
    initial_option: Light
    on_value:
      lambda: |-
        if(id(init_done)) {
          switch (i) { // index of the choosen value
            case 0:
              ESP_LOGD("custom", " Turn off led_matrix_display");
              id(led_matrix_display).set_enabled(false);
              break;
            case 1: 
              ESP_LOGD("custom", " Turn on led_matrix_display");
              id(led_matrix_display).set_enabled(true);
              break;
          }
        }

light:
  - platform: neopixelbus
    variant: WS2811
    icon: "mdi:wall-sconce-flat"
    pin: 15
    num_leds: 256
    type: GRB
    name: "led_matrix"
    id: led_matrix_light
    default_transition_length: 0s
    color_correct: [30%, 30%, 30%]
    restore_mode: RESTORE_DEFAULT_OFF
    on_state:
      lambda: |-
        float r,g,b,brightness;
        auto state = id(led_matrix_light).current_values;
        state.as_rgb(&r,&g,&b);
        brightness = state.get_brightness();
        ESP_LOGD("custom", "The value of sensor is: [%f,%f,%f] - %f",255*r/brightness,255*g/brightness,255*b/brightness,brightness);



    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:

time:
  - platform: sntp
    timezone: "Europe/Paris"
    id: _time

font:
  - file: font/monobit.ttf
    id: monobit
    size: 16
    glyphs:  |
      !"%()+*=,-_.:Â°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz@


display:
  - platform: addressable_light
    id: led_matrix_display
    addressable_light_id: led_matrix_light
    width: 32
    height: 8
    pixel_mapper: |-
      if (x % 2 == 0) {
        return (x * 8) + y;
      }
      return (x * 8) + (7 - y);
    rotation: 180Â°
    update_interval: 16ms
    #it.strftime(0, 0, id(monobit), Color(id(red)) ,TextAlign::CENTER, "%H:%M",id(homeassistant_time).now());
    lambda: |-
          float r,g,b,brightness;
          auto state = id(led_matrix_light).current_values;
          state.as_rgb(&r,&g,&b);
          brightness = state.get_brightness();
          auto index = id(display_mode).active_index();
          if ((index.has_value()) && index == 1 ) {
            it.strftime(7, -4, id(monobit), Color(int(255*r/brightness),int(255*g/brightness),int(255*b/brightness)) , "%H:%M", id(_time).now());
          }
    