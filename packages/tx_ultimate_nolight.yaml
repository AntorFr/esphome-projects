substitutions:
  button_count: "3"

  button_1_switch_relay: "true" 
  button_1_light_id: "1"

  button_2_switch_relay: "true"
  button_2_light_id: "2"

  button_3_switch_relay: "true"
  button_3_light_id: "3"

  light_1_entity_category: "" #config
  light_2_entity_category: "" #config
  light_3_entity_category: "" #config

  light_1_internal: "false" 
  light_2_internal: "false" 
  light_3_internal: "false" 

  light_1_restore_mode: "RESTORE_DEFAULT_OFF"
  light_2_restore_mode: "RESTORE_DEFAULT_OFF" 
  light_3_restore_mode: "RESTORE_DEFAULT_OFF"

  vibra_time: 50ms
  button_on_time: 500ms

  relay_1_pin: GPIO18
  relay_2_pin: GPIO17
  relay_3_pin: GPIO27
  relay_4_pin: GPIO23

  vibra_motor_pin: GPIO21
  pa_power_pin: GPIO26

  led_pin: GPIO13
  status_led_pin: GPIO33

  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO22

  audio_lrclk_pin: GPIO4
  audio_bclk_pin: GPIO2
  audio_sdata_pin: GPIO15

  touchpanel_power_pin: GPIO5

  led_variant: WS2811

esp32:
  board: esp32dev
  framework:
    type: arduino

esphome:
  platformio_options:
    board_build.f_cpu: 240000000L
  on_boot:
    priority: -100
    then:
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF
      - binary_sensor.template.publish:
          id: touchfield_3
          state: OFF
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF
      - binary_sensor.template.publish:
          id: long_press
          state: OFF
      - script.execute: init_relays

logger:
# hardware_uart: UART2
  level: DEBUG
  logs:
    binary_sensor: INFO
    light: INFO
    script: INFO
    switch: INFO
    tx_ultimate_touch: INFO
    uart_debug: INFO

#dashboard_import:
#  package_import_url: github://SmartHome-yourself/sonoff-tx-ultimate-for-esphome/tx_ultimate.yaml@main
#  import_full_config: false
   
improv_serial:

captive_portal:

external_components:
  - source:
      type: git
      url: https://github.com/SmartHome-yourself/sonoff-tx-ultimate-for-esphome
      ref: main
    components: [tx_ultimate_touch]
    

binary_sensor:
  - id: touchfield_1
    platform: template
    name: "Touchfield 1"
    on_press:
      - lambda: >
          if (${button_1_switch_relay}) {
            auto call = id(relay_${button_1_light_id}).toggle();
            call.perform();
          }
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF
  - id: touchfield_2
    platform: template
    name: "Touchfield 2"
    on_press:
      - lambda: >
          if (${button_2_switch_relay}) {
            auto call = id(relay_${button_2_light_id}).toggle();
            call.perform();
          }
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF
  - id: touchfield_3
    platform: template
    name: "Touchfield 3"
    on_press:
      - lambda: >
          if (${button_3_switch_relay}) {
            auto call = id(relay_${button_3_light_id}).toggle();
            call.perform();
          }
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_3
          state: OFF
  - id: swipe_left
    platform: template
    name: "Swipe left"
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF
  - id: swipe_right
    platform: template
    name: "Swipe_right"
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF
  - id: multi_touch
    platform: template
    name: "Multi Touch"
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
  - id: long_press
    platform: template
    name: "Long Press"
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: long_press
          state: OFF

output:
  - id: l1_output
    platform: gpio
    pin: ${relay_1_pin}
  - id: l2_output
    platform: gpio
    pin: ${relay_2_pin}
  - id: l3_output
    platform: gpio
    pin: ${relay_3_pin}

switch:
  - id: vibra
    platform: gpio
    pin: ${vibra_motor_pin}
    name: "Vibration"
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: ${vibra_time}
      - switch.turn_off: vibra

  - id: pa_power
    platform: gpio
    pin: ${pa_power_pin}
    name: "PA Power"
    internal: true
    restore_mode: ALWAYS_ON

  - id: touch_power
    platform: gpio
    name: "touch panel power"
    pin:
      number: ${touchpanel_power_pin}
      inverted: true
    internal: true
    restore_mode: RESTORE_DEFAULT_ON



light:
  - id: relay_1
    platform: binary
    name: "L1"
    output: l1_output
    restore_mode: ${light_1_restore_mode}
    entity_category: ${light_1_entity_category}
    internal: ${light_1_internal}  
  - id: relay_2
    platform: binary
    name: "L2"
    output: l2_output
    restore_mode: ${light_2_restore_mode}
    entity_category: ${light_2_entity_category}
    internal: ${light_2_internal}  
  - id: relay_3
    platform: binary
    name: "L3"
    output: l3_output
    restore_mode: ${light_3_restore_mode}
    entity_category: ${light_3_entity_category}
    internal: ${light_3_internal}  
 
media_player:
  - platform: i2s_audio
    id: media_out
    name: Player
    dac_type: external
    i2s_dout_pin: ${audio_sdata_pin}
    i2s_audio_id: audio_i2s
    i2s_comm_fmt: lsb
    mode: mono

i2s_audio:
  id: audio_i2s
  i2s_lrclk_pin: ${audio_lrclk_pin}
  i2s_bclk_pin: ${audio_bclk_pin}

uart:
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  id: my_uart
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: RX
    dummy_receiver: false
    after:
      timeout: 2s
      bytes: 2048
    sequence:
      - lambda: UARTDebug::log_hex(direction, bytes, ' ');

tx_ultimate_touch:
  id: tx_touch
  uart: my_uart

  on_press:
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_press", "Touch Position: %d / State: %d", touch.x, touch.state);

  on_release:
    - script.execute:
        id: handle_release
        pos: !lambda "return touch.x;"
    - switch.turn_on: vibra
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_release", "Release Position: %d / State: %d", touch.x, touch.state);

  on_swipe_left:
    - switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: swipe_left
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_left", "Swipe Left Position: %d / State: %d", touch.x, touch.state);

  on_swipe_right:
    - switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: swipe_right
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_right", "Swipe Right Position: %d / State: %d", touch.x, touch.state);

  on_full_touch_release:
    - switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: multi_touch
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_full_touch_release", "Full Touch Release Position: %d / State: %d", touch.x, touch.state);

  on_long_touch_release:
    - switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: long_press
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_long_touch_release", "Long Touch Release Position: %d / State: %d", touch.x, touch.state);


script:
  - id: handle_release
    mode: restart
    parameters:
      pos: int
    then:
      - if:
          condition:
            lambda: "return ${button_count}==1;"
          then:
            - binary_sensor.template.publish:
                id: touchfield_1
                state: ON

      - if:
          condition:
            lambda: "return ${button_count}==2;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 5;"
                then:
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - binary_sensor.template.publish:
                      id: touchfield_2
                      state: ON

      - if:
          condition:
            lambda: "return ${button_count}==3;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 3;"
                then:
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - if:
                      condition:
                        lambda: "return pos <= 7;"
                      then:
                        - binary_sensor.template.publish:
                            id: touchfield_2
                            state: ON

                      else:
                        - binary_sensor.template.publish:
                            id: touchfield_3
                            state: ON
 
  - id: init_relays
    then:
       - lambda: >
          if (!${button_1_switch_relay}) {
            id(relay_${button_1_light_id}).turn_on();
          }
          if (!${button_2_switch_relay}) {
            id(relay_${button_2_light_id}).turn_on();
          }
          if (!${button_3_switch_relay}) {
            id(relay_${button_3_light_id}).turn_on();
          }
