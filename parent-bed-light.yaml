substitutions:
  device_name: "parent-bed-light"
  friendly_name: "Veilleuse lit parent"
  area: "Chambre Parents"


esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  area: ${area}  

esp8266:
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: ${device_name}.intra.sberard.fr

  ap:
    ssid: ${device_name}
    password: !secret ap_password

logger:
  level: INFO
  
api:
  reboot_timeout: 30min
  encryption:
    key: !secret api_encryption

ota:
  platform: esphome
  password: !secret ota_password

captive_portal:
web_server:

external_components:
  - source: github://AntorFr/esphome-addressable-effetcs
    components: [ custom-addressable-effetcs ]
    refresh: 1s
  #- source:
  #    type: local
  #    path: components

custom-addressable-effetcs:
#######################################
# Device specific Config Begins Below #
#######################################
packages:
  device_base:
    url: https://github.com/AntorFr/esphome-projects
    file: packages/device_base.yaml

status_led:
  pin: 
    number: D0
    inverted: true

light:
  - name: None
    platform: neopixelbus
    icon: "mdi:light-recessed"
    type: GRB
    variant: WS2812
    pin: D1
    num_leds: 21
    internal: False
    id: led
    restore_mode: ALWAYS_OFF
    effects:
      - addressable_rainbow:
          name: "Halo Arc-en-ciel"
          speed: 2
          width: 3

      - addressable_scan:
          name: "Rotation douce"
          move_interval: 100ms
          scan_width: 1

      - addressable_lambda:
          name: "Respiration"
          update_interval: 100ms
          lambda: |-
            static int step = 0;
            float intensity = (sin(step * 0.1) + 1.0) / 2.0;
            for (int i = 0; i < it.size(); i++) {
              uint8_t r = 255 * intensity;
              uint8_t g = 100 * intensity;
              uint8_t b = 50 * intensity;
              it[i] = Color(r, g, b);
            }
            step++;

      - addressable_lambda:
          name: "Centre pulsant"
          update_interval: 100ms
          lambda: |-
            static int step = 0;
            float intensity = (sin(step * 0.2) + 1.0) / 2.0;
            for (int i = 0; i < it.size(); i++) {
              float distance = abs(i - 10);  // LED centrale
              if (distance < 2) {
                it[i] = Color(255 * intensity, 180 * intensity, 100 * intensity);
              } else {
                it[i] = Color(0, 0, 0);
              }
            }
            step++;
