substitutions:
  device_name: entrance-gate
  friendly_name: Portail

esphome:
  name: ${device_name}
  
esp8266:
  board: esp8285

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: ${device_name}.intra.sberard.fr

  ap:
    ssid: ${device_name}
    password: !secret ap_password

logger:
  level: DEBUG
  
api:
  reboot_timeout: 15min
  password: !secret api_password

ota:
  password: !secret ota_password

captive_portal:


sensor:
  - platform: wifi_signal
    name: ${device_name} Wifi Strength
    update_interval: 60s
  - platform: uptime
    name: ${device_name} Uptime
#######################################
# Device specific Config Begins Below #
#######################################
globals:
  - id: last_move 
    type: bool #true: openning / false: closing
    restore_value: true

switch:
  - platform: gpio
    pin: GPIO12
    id: relay

script:
  - id: open_cover
    then:
      - if:
          condition:
            lambda: 'return id(my_cover).current_operation == CoverOperation::COVER_OPERATION_CLOSING;'
          then:
            - script.execute: stop_cover
            - script.wait: stop_cover
      - if:
          condition:
            lambda: |-
              return (
                (id(my_cover).position > 0.)
                and (id(my_cover).position < 1.)
                and (id(last_move)==true)
              );
          then:
            - script.execute: invert_last_move
            - script.wait: invert_last_move
      - if:
          condition:
            lambda: |-
              return (
                (id(my_cover).current_operation == CoverOperation::COVER_OPERATION_IDLE)
                and (id(my_cover).position != 1.)
              );
          then:
            - switch.turn_on: relay
            - delay: 500ms
            - switch.turn_off: relay
            - cover.template.publish:
                id: my_cover
                current_operation: OPENING
            - delay: 12s
            - cover.template.publish:
                id: my_cover
                current_operation: IDLE
                position: 1.
 
  - id: close_cover
    then:
      - if:
          condition:
            lambda: 'return id(my_cover).current_operation == CoverOperation::COVER_OPERATION_OPENING;'
          then:
            - script.execute: stop_cover
            - script.wait: stop_cover
      - if:
          condition:
            lambda: |-
              return (
                (id(my_cover).position > 0.)
                and (id(my_cover).position < 1.)
                and (id(last_move)==false)
              );
          then:
            - script.execute: invert_last_move
            - script.wait: invert_last_move
      - if:
          condition:
            lambda: |-
              return (
                (id(my_cover).current_operation == CoverOperation::COVER_OPERATION_IDLE)
                and (id(my_cover).position != 0.)
              );
          then:
            - switch.turn_on: relay
            - delay: 500ms
            - switch.turn_off: relay
            - cover.template.publish:
                id: my_cover
                current_operation: CLOSING
            - delay: 12s
            - cover.template.publish:
                id: my_cover
                current_operation: IDLE
                position: 0.
                  
  - id: stop_cover
    then:
      - if:
          condition:
            lambda: 'return id(my_cover).current_operation != CoverOperation::COVER_OPERATION_IDLE;'
          then:
            - if:
                condition:
                  - script.is_running: open_cover
                then:
                  - script.stop: open_cover
            - if:
                condition:
                  - script.is_running: close_cover
                then:
                  - script.stop: close_cover
            - if:
                condition:
                  - script.is_running: invert_last_move
                then:
                  - script.wait: invert_last_move
            - switch.turn_on: relay
            - delay: 500ms
            - switch.turn_off: relay
            - lambda: |-
                if (id(my_cover).current_operation == CoverOperation::COVER_OPERATION_OPENING) {
                  id(last_move) = true;
                } else if (id(my_cover).current_operation == CoverOperation::COVER_OPERATION_CLOSING) {
                  id(last_move) = false;
                }
            - cover.template.publish:
                id: my_cover
                current_operation: IDLE
                position: 0.5
            - delay: 800ms
  
  - id: invert_last_move
    then:
      - if:
          condition:
            lambda: |-
              if (id(my_cover).current_operation == CoverOperation::COVER_OPERATION_IDLE) { return false;}
              if ((id(my_cover).position == 1.) or (id(my_cover).position == 0.)) { return false;}
              return true;
          then:
            - switch.turn_on: relay
            - delay: 500ms
            - switch.turn_off: relay
            - delay: 800ms
            - switch.turn_on: relay
            - delay: 500ms
            - switch.turn_off: relay
            - lambda: 'id(last_move) = !id(last_move);'
            - delay: 800ms
            
binary_sensor:
  - platform: gpio
    id: closed_sensor
    pin: 
      number: GPIO4
      inverted: false
    name: "Gate closed"
    device_class: "garage_door"
    entity_category: "diagnostic"
    icon: "mdi:gate"
  - platform: gpio
    pin: 
      number: GPIO5
      inverted: true
    name: "Obstruction"
    disabled_by_default: true
    filters:
      - delayed_on: 50ms

cover:
  - platform: template
    id: my_cover
    name: ${friendly_name}
    has_position: true
    device_class: gate
    open_action:
      - script.execute: open_cover
    close_action:
      - script.execute: close_cover
    stop_action:
      - script.execute: stop_cover
    lambda: |-
      if (id(closed_sensor).state) {
        return 1.;
      } else if (id(my_cover).current_operation != CoverOperation::COVER_OPERATION_IDLE) {
        return 0.5;
      }
      else {
        return 0.;
      }
    